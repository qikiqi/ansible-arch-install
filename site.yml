---
- hosts: all
  tasks:
    - name: Abort if the host is not booted from the Arch install media
      fail:
        msg: "This host is not booted from the Arch install media!"
      when: ansible_nodename != 'archiso'
      tags:
        - quick_exit
    - name: Synchronize clock via NTP
      command: timedatectl set-ntp true
      tags:
        - sync_clock
    - name: Repartition install drive
      block:
        - name: Wipe install drive and all its partitions
          command: find /dev -wholename "{{ install_drive }}*" -exec wipefs --force --all {} \;
          tags:
            - wipefs
        - name: Create boot partition
          parted:
            device: '{{ install_drive }}'
            label: gpt
            number: 1
            part_end: 512MiB
            name: boot
            flags: [boot, esp]
            state: present
        - name: Create root partition
          parted:
            device: '{{ install_drive }}'
            label: gpt
            number: 2
            part_start: 512MiB
            name: root
            flags: [lvm]
            state: present
      tags:
        - repartition
    - name: Setup LUKS encryption for root filesystem
      block:
        #        - name: Copy keyfile
        #          copy:
        #            src: '{{ luks_keyfile }}'
        #            dest: /root/keyfile
        - name: Destroy existing LUKS volume
          community.crypto.luks_device:
            device: '{{ install_drive }}{{ root_partition_suffix }}'
            state: absent
        - name: Create and open LUKS volume
          community.crypto.luks_device:
            device: '{{ install_drive }}{{ root_partition_suffix }}'
            #keyfile: /root/keyfile
            passphrase: '{{ luks_passphrase }}'
            name: cryptroot
            state: opened
            #        - name: Get UUID for root LUKS volume
            #          command: blkid -s UUID -o value /dev/cryptroot/root
            #          register: root_luks_uuid
            #          changed_when: false
      tags:
        - luks
    - name: Setup LVM root
      block:
        - name: Remove existing volume group
          lvg:
            vg: vg
            force: yes
            state: absent
        - name: Configure volume group
          lvg:
            vg: vg
            pvs:
              - '/dev/mapper/cryptroot'
        - name: Configure logical volumes
          lvol:
            vg: vg
            lv: '{{ item.lv }}'
            size: '{{ item.size }}'
          loop:
            - {lv: root, size: "100%FREE"}
      tags:
        - lvm
    - name: Create filesystems
      block:
        - name: Create FAT32 filesystem in boot partition
          filesystem:
            dev: '{{ install_drive }}{{ boot_partition_suffix }}'
            fstype: vfat
            opts: -F32
            force: yes
        - name: Create ext4 filesystem in root volume
          filesystem:
            dev: /dev/mapper/vg-root
            fstype: ext4
            force: yes
        - name: Get UUID for boot filesystem
          command: blkid -s UUID -o value '{{ install_drive }}{{ boot_partition_suffix }}'
          register: boot_uuid
          changed_when: false
        - name: Get UUID for root filesystem
          command: blkid -s UUID -o value /dev/mapper/vg-root
          register: root_uuid
          changed_when: false
      tags:
        - create_filesystems
    - name: Mount filesystems
      block:
        - name: Mount root filesystem
          mount:
            path: /mnt
            src: UUID={{ root_uuid.stdout }}
            fstype: ext4
            state: mounted
        - name: Create mountpoint for boot volume
          file:
            path: /mnt/boot
            state: directory
        - name: Mount boot filesystem
          mount:
            path: /mnt/boot
            src: UUID={{ boot_uuid.stdout }}
            fstype: vfat
            state: mounted
      tags:
        - mount_filesystems
    - name: Rank Arch mirrors
      block:
        - name: Install the pacman-contrib package (for rankmirrors)
          pacman:
            name:
              - pacman-contrib
            update_cache: yes
        - name: Use rankmirrors to filter the fastest mirrors that support HTTPS
          shell: curl -s "https://www.archlinux.org/mirrorlist/?country=FI&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
      tags:
        - mirrors
    - name: Run pacstrap
      command: pacstrap /mnt base base-devel linux linux-firmware intel-ucode man-db man-pages texinfo neovim dhcpcd diffutils less lvm2 cryptsetup netctl which usbutils efibootmgr openssh python sudo wpa_supplicant
      tags:
        - pacstrap
    - name: Generate fstab
      block:
        - name: Generate blank fstab
          command: genfstab -U /mnt >> /mnt/etc/fstab
        - name: Add root volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /
            src: UUID={{ root_uuid.stdout }}
            fstype: ext4
            opts: defaults
            passno: '1'
            state: present
        - name: Add boot volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /boot
            src: UUID={{ boot_uuid.stdout }}
            fstype: vfat
            opts: defaults
            passno: '2'
            state: present
      tags:
        - fstab
    - name: Set local timezone
      command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Helsinki /etc/localtime
      tags:
        - timezone
    - name: Generate adjtime file
      command: arch-chroot /mnt hwclock --systohc
      tags:
        - adjtime
    - name: Setup locales
      block:
        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: '{{ item.regex }}'
            line: '{{ item.line }}'
          loop:
            - {regex: en_GB\.UTF-8 UTF-8, line: en_GB.UTF-8 UTF-8}
            - {regex: en_GB ISO-8859-1, line: en_GB ISO-8859-1}
        - name: Create locale.conf
          copy:
            content: "LANG=en_GB.UTF-8"
            dest: /mnt/etc/locale.conf
        - name: Generate locales
          command: arch-chroot /mnt locale-gen
      tags:
        - locales
    - name: Set hostname
      copy:
        content: '{{ inventory_hostname }}'
        dest: /mnt/etc/hostname
      tags:
        - hostname
    - name: Setup netctl
      block:
        - name: Create netctl profile for wireless connection
          copy:
            content: |
              Description='Wireless with DHCP'
              Interface={{ post_wireless_interface }}
              Connection=wireless
              ESSID={{ wireless_essid }}
              Security={{ wireless_security }}
              IP=dhcp
              Key={{ wireless_passphrase }}
            dest: "/mnt/etc/netctl/{{ post_wireless_interface }}-{{ wireless_essid_simple }}"
        - name: Enable wireless netctl profile
          command: "arch-chroot /mnt netctl enable {{ post_wireless_interface }}-{{ wireless_essid_simple }}"
      tags:
        - netctl
    - name: Enable sshd
      command: arch-chroot /mnt systemctl enable sshd
      tags:
        - sshd
    - name: Set up initramfs
      block:
        - name: Add mkinitcpio.conf hooks
          lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base udev autodetect microcode modconf kms keyboard keymap block encrypt lvm2 resume filesystems fsck)
        - name: Create new initramfs
          command: arch-chroot /mnt mkinitcpio -p linux
      tags:
        - initramfs
        - mkinitcpio
    - name: Set up bootctl
      block:
        - name: Create dirs for bootctl
          file:
            path: /mnt/boot/loader/entries
            state: directory
        - name: Add loader config
          copy:
            content: |
              default arch
            dest: /mnt/boot/loader/loader.conf
        - name: Add loader entry config
          copy:
            content: |
              title linux
              linux /vmlinuz-linux
              initrd /intel-ucode.img
              initrd /initramfs-linux.img
              options root=/dev/mapper/vg-root cryptdevice={{ install_drive }}{{ root_partition_suffix }}:cryptroot:allow-discards rw
            dest: /mnt/boot/loader/entries/arch.conf
        - name: Install bootctl
          command: arch-chroot /mnt bootctl --path=/boot install
      tags:
        - bootctl
    - name: Setup user account
      block:
        - name: Create user account
          command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} --password {{ user_password }}
        - name: Create user's ssh directory
          file:
            path: /mnt/home/{{ user_name }}/.ssh
            state: directory
        - name: Set mode, owner, and group on user's ssh directory
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0700 /home/{{ user_name }}/.ssh
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh
        - name: Copy over ssh key from current Ansible controller as an authorized key
          copy:
            src: '{{ lookup("env", "HOME") }}/.ssh/id_ed25519.pub'
            dest: /mnt/home/{{ user_name }}/.ssh/authorized_keys
        - name: Set mode, owner, and group on user's authorized_key file
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys
      tags:
        - user_account
    - name: Give passwordless sudo access to wheel group
      copy:
        content: '%wheel ALL=(ALL) NOPASSWD: ALL'
        dest: /mnt/etc/sudoers.d/wheel
        validate: /usr/sbin/visudo --check --file=%s
      tags:
        - sudo
    - name: Reboot
      reboot:
        connect_timeout: 1
        reboot_timeout: 1
      failed_when: false
      tags:
        - reboot
